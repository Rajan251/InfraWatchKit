server:
  http_listen_port: 9080

clients:
  - url: http://10.21.120.136:3100/loki/api/v1/push #your loki ip and port

scrape_configs:
  - job_name: system
    static_configs:
      - targets: [localhost]
        labels:
          job: system
          __path__: /var/log/syslog
      - targets: [localhost]
        labels:
          job: system
          __path__: /var/log/auth.log

  - job_name: docker
    static_configs:
      - targets: [localhost]
        labels:
          job: docker
          __path__: /var/lib/docker/containers/*/*.log
    pipeline_stages:
      - docker: {}

  - job_name: mongodb
    static_configs:
      - targets: [localhost]
        labels:
          job: mongodb
          __path__: /var/log/mongodb/mongod.log
      - targets: [localhost]
        labels:
          job: mongodb
          __path__: /var/log/mongodb/mongos.log
    pipeline_stages:
      - match:
          selector: '{job="mongodb"}'
          stages:
          - regex:
              expression: '(?P<timestamp>\S+)\s+(?P<severity>\w+)\s+(?P<component>\w+)\s+\[(?P<context>\S+)\]\s+(?P<message>.+)'
          - labels:
              severity:
              component:

  - job_name: mysql
    static_configs:
      # MySQL Error Log
      - targets: [localhost]
        labels:
          job: mysql
          log_type: error
          __path__: /var/log/mysql/error.log
      # MySQL Slow Query Log
      - targets: [localhost]
        labels:
          job: mysql
          log_type: slow_query
          __path__: /var/log/mysql/mysql-slow.log
      # MySQL General Query Log
      - targets: [localhost]
        labels:
          job: mysql
          log_type: general
          __path__: /var/log/mysql/mysql.log
      # MySQL Binary Log (if text format)
      - targets: [localhost]
        labels:
          job: mysql
          log_type: binlog
          __path__: /var/log/mysql/mysql-bin.*
    pipeline_stages:
      - match:
          selector: '{job="mysql"}'
          stages:
          - regex:
              expression: '(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+Z)\s+(?P<thread_id>\d+)\s+\[(?P<level>\w+)\]\s+(?P<message>.+)'
          - timestamp:
              source: timestamp
              format: RFC3339
          - labels:
              level:
              thread_id:
      # MySQL slow query log format
      - match:
          selector: '{job="mysql", log_type="slow_query"}'
          stages:
          - regex:
              expression: '# Time: (?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+Z)'
          - timestamp:
              source: timestamp
              format: RFC3339
      # Filter out connection logs (optional)
      - drop:
          source: message
          expression: '.*Connect.*'
          drop_counter_reason: "connection_logs"
  
  - job_name: nginx
    static_configs:
      # Nginx Access Log
      - targets: [localhost]
        labels:
          job: nginx
          log_type: access
          __path__: /var/log/nginx/access.log
      # Nginx Error Log
      - targets: [localhost]
        labels:
          job: nginx
          log_type: error
          __path__: /var/log/nginx/error.log
      # Additional nginx log files (if you have custom configs)
      - targets: [localhost]
        labels:
          job: nginx
          log_type: access
          __path__: /var/log/nginx/*access.log
      - targets: [localhost]
        labels:
          job: nginx
          log_type: error
          __path__: /var/log/nginx/*error.log
    pipeline_stages:
      # Parse nginx access logs (common log format)
      - match:
          selector: '{job="nginx", log_type="access"}'
          stages:
            - regex:
                expression: '(?P<remote_addr>\S+)\s+-\s+(?P<remote_user>\S+)\s+\[(?P<time_local>[^\]]+)\]\s+"(?P<method>\S+)\s+(?P<path>\S+)\s+(?P<protocol>\S+)"\s+(?P<status>\d+)\s+(?P<body_bytes_sent>\d+)\s+"(?P<http_referer>[^"]*)"\s+"(?P<http_user_agent>[^"]*)"'
            - labels:
                method:
                status:
                remote_addr:
            - timestamp:
                source: time_local
                format: '02/Jan/2006:15:04:05 -0700'
      # Parse nginx error logs
      - match:
          selector: '{job="nginx", log_type="error"}'
          stages:
            - regex:
                expression: '(?P<timestamp>\d{4}/\d{2}/\d{2}\s+\d{2}:\d{2}:\d{2})\s+\[(?P<level>\w+)\]\s+(?P<pid>\d+)#(?P<tid>\d+):\s+(?P<message>.*)'
            - timestamp:
                source: timestamp
                format: '2006/01/02 15:04:05'
            - labels:
                level:
                pid:
